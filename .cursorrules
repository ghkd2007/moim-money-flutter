# 🚀 머니투게더 (Money Together) - Cursor AI Rules

## 📋 프로젝트 개요
**앱 이름**: 머니투게더 (Money Together)  
**앱 목적**: 특정 사람들로 구성된 모임 멤버들이 서로간의 지출, 예산, 수입 등 경제활동과 관련된 것을 서로 확인하고 조회하는 앱  
**핵심 가치**: "함께하는 투명한 금융 관리"  
**기술 스택**: Flutter + Firebase (Android 우선, iOS 향후)

## 🎯 핵심 기능 (우선순위 순)
1. **수입/지출 CRUD** - 기본적인 금융 데이터 관리
2. **모임별 카테고리 CRUD** - 그룹별 분류 관리
3. **모임 초대/수락** - 멤버 관리 시스템
4. **캘린더뷰** - 날짜별 지출/수입 시각화
5. **SMS 자동 데이터 추출** - 은행/카드사 문자 자동 인식

## 🏗️ 고급 개발자 관점 - 아키텍처 및 설계 원칙

### 📐 아키텍처 패턴
- **MVVM + Repository Pattern**: 비즈니스 로직과 UI 분리
- **Dependency Injection**: 테스트 가능한 구조
- **SOLID 원칙**: 단일 책임, 개방-폐쇄, 리스코프 치환, 인터페이스 분리, 의존성 역전
- **Clean Architecture**: 계층별 의존성 방향 준수

### 🔗 의존성 관리 원칙
```dart
// ✅ 좋은 예시: 의존성 역전
abstract class TransactionRepository {
  Future<List<Transaction>> getTransactions();
}

class TransactionService {
  final TransactionRepository _repository;
  
  TransactionService(this._repository);
}

// ❌ 나쁜 예시: 구체 클래스에 직접 의존
class TransactionService {
  final FirebaseTransactionRepository _repository = FirebaseTransactionRepository();
}
```

### 🎯 설계 패턴 적용
- **Factory Pattern**: 객체 생성 로직 캡슐화
- **Observer Pattern**: 상태 변화 알림
- **Strategy Pattern**: 알고리즘 교체 가능
- **Builder Pattern**: 복잡한 객체 생성

## 🧪 고급 테스터 관점 - 품질 보증 체계

### 📊 테스트 전략 (Testing Pyramid)
```
    🔺 E2E Tests (5%)
   🔺🔺 Integration Tests (15%)
🔺🔺🔺🔺🔺 Unit Tests (80%)
```

### 🎯 테스트 커버리지 목표
- **Unit Tests**: 90% 이상 (비즈니스 로직 중심)
- **Integration Tests**: 70% 이상 (서비스 간 연동)
- **E2E Tests**: 50% 이상 (핵심 사용자 시나리오)

### 🔍 테스트 설계 원칙
```dart
// ✅ 좋은 예시: Given-When-Then 패턴
group('TransactionService Tests', () {
  test('should create transaction successfully', () {
    // Given: 유효한 거래 데이터
    final transaction = Transaction(
      amount: 50000,
      description: '식사비',
      categoryId: 'food',
    );
    
    // When: 거래 생성 요청
    final result = await service.createTransaction(transaction);
    
    // Then: 성공 결과 확인
    expect(result.isSuccess, isTrue);
    expect(result.data.id, isNotEmpty);
  });
});
```

### 🚨 테스트 데이터 관리
- **Test Fixtures**: 재사용 가능한 테스트 데이터
- **Mock Objects**: 외부 의존성 격리
- **Test Doubles**: Stub, Spy, Mock, Fake 적절히 활용

## 📋 고급 기획자 관점 - 비즈니스 로직 및 사용자 경험

### 🎯 사용자 스토리 및 시나리오
```markdown
## 사용자 스토리: 지출 추가
**As a** 모임 멤버
**I want to** 지출을 빠르게 추가할 수 있도록
**So that** 모임의 재정 상황을 투명하게 공유할 수 있다

## Acceptance Criteria
- [ ] 3번의 터치로 지출 입력 완료
- [ ] 카테고리 선택이 직관적
- [ ] 금액 입력이 오류 방지
- [ ] 즉시 모임원들에게 알림
```

### 📱 사용자 여정 맵 (User Journey Map)
```
1. 앱 실행 → 2. 모임 선택 → 3. 지출 추가 → 4. 카테고리 선택 → 5. 금액 입력 → 6. 저장 완료
   ↓           ↓           ↓           ↓           ↓           ↓
   빠름        직관적      명확한      시각적      오류방지    피드백
```

### 🎨 UX 원칙 및 가이드라인
- **Fitts's Law**: 자주 사용하는 기능을 쉽게 접근 가능하게
- **Hick's Law**: 선택 옵션을 적절히 제한
- **Miller's Law**: 한 번에 7±2개 항목만 표시

## 🔗 연관성 분석 및 영향도 평가 체계

### 📊 변경사항 영향도 분석 매트릭스
```
영향도 레벨:
🔴 HIGH: 전체 앱 동작에 영향
🟡 MEDIUM: 특정 기능에 영향
🟢 LOW: UI/UX 개선만
⚪ NONE: 코드 스타일만
```

### 🔍 변경사항 적용 전 체크리스트
#### 1단계: 직접 영향 분석
- [ ] 수정 대상 파일 식별
- [ ] 변경 내용의 범위 파악
- [ ] 기존 기능과의 호환성 확인

#### 2단계: 간접 영향 분석
- [ ] **Import 의존성**: 이 파일을 import하는 모든 파일 검색
- [ ] **Export 의존성**: 이 파일에서 export하는 모든 파일 검색
- [ ] **공유 모델**: 같은 데이터 구조를 사용하는 파일들 검색
- [ ] **API 계약**: 외부에서 호출하는 인터페이스 변경 여부

#### 3단계: 테스트 영향 분석
- [ ] **Unit Tests**: 관련 테스트 파일들 검색 및 업데이트 필요성 확인
- [ ] **Integration Tests**: 서비스 간 연동 테스트 영향 확인
- [ ] **E2E Tests**: 사용자 시나리오 테스트 영향 확인

#### 4단계: 문서 및 설정 영향
- [ ] **API 문서**: 변경된 인터페이스 문서 업데이트
- [ ] **설정 파일**: 환경 변수, 설정 값 변경 필요성
- [ ] **의존성**: pubspec.yaml, build.gradle 등 변경 필요성

### 🎯 연관성 분석 자동화 가이드
```bash
# 1. 파일 사용처 검색
grep -r "Transaction" lib/ --include="*.dart"

# 2. Import 관계 분석
grep -r "import.*transaction" lib/ --include="*.dart"

# 3. 테스트 파일 검색
find test/ -name "*transaction*" -type f

# 4. 의존성 그래프 생성
flutter pub deps
```

### 📋 영향도 분석 예시 시나리오

#### 시나리오 1: Transaction 모델 필드 추가
```
🔴 HIGH IMPACT
직접 영향: models/transaction_model.dart
간접 영향: 
  - services/transaction_service.dart (fromMap/toMap 수정 필요)
  - screens/add_transaction_screen.dart (UI 업데이트 필요)
  - screens/home_screen.dart (표시 로직 수정 필요)
테스트 영향:
  - test/models/transaction_test.dart (새 필드 테스트 추가)
  - test/services/transaction_service_test.dart (서비스 로직 테스트)
문서 영향: API 문서, 모델 스키마 문서
```

#### 시나리오 2: 색상 상수 변경
```
🟡 MEDIUM IMPACT
직접 영향: constants/design_system.dart
간접 영향:
  - 모든 UI 화면 (색상 적용된 부분들)
  - 테마 관련 설정
테스트 영향:
  - UI 테스트 (색상 검증)
  - 접근성 테스트 (대비율)
문서 영향: 디자인 가이드라인
```

## 📁 프로젝트 구조 규칙
```
lib/
├── models/           # 데이터 모델 (소문자, 복수형)
├── screens/          # 화면 컴포넌트
├── widgets/          # 재사용 가능한 위젯
├── services/         # 비즈니스 로직 서비스
├── utils/            # 유틸리티 함수
├── constants/        # 상수 정의
└── main.dart         # 앱 진입점
```

## 🔤 명명 규칙

### 파일명
- `snake_case` 사용: `user_model.dart`, `transaction_screen.dart`
- 기능을 명확히 설명하는 이름 사용
- ❌ `UserModel.dart`, `screen.dart` (대문자 시작, 너무 일반적)

### 변수명
- 명확하고 이해하기 쉬운 이름: `String userName`, `int totalAmount`
- 리스트는 복수형: `List<Transaction> transactions`
- ❌ `String u`, `int amt` (너무 짧거나 모호)

### 함수명
- 동사로 시작: `void createTransaction()`, `bool isValidEmail()`
- CRUD 작업: `addTransaction()`, `getTransactionById()`
- ❌ `void process()`, `void handle()` (너무 일반적)

### 클래스명
- `PascalCase` 사용: `class UserModel`, `class TransactionService`
- ❌ `snake_case` 사용 금지

## 📝 주석 작성 규칙

### 클래스 주석
```dart
/// 사용자 인증 서비스
/// 이메일과 비밀번호를 사용하여 로그인을 처리합니다.
class AuthService {
  /// 사용자 로인 처리
  /// 
  /// [email] 사용자 이메일
  /// [password] 사용자 비밀번호
  /// 
  /// Returns 로그인 성공 여부
  Future<bool> login(String email, String password) async {
    // Firebase 인증 서비스 호출
    try {
      final result = await FirebaseAuth.instance.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      return result.user != null;
    } catch (e) {
      // 로그인 실패 시 false 반환
      return false;
    }
  }
}
```

### 복잡한 로직 주석
```dart
void calculateTotalAmount() {
  // 1단계: 기본 금액 계산
  double baseAmount = items.fold(0.0, (sum, item) => sum + item.price);
  
  // 2단계: 할인율 적용 (10% 할인)
  double discountAmount = baseAmount * 0.1;
  
  // 3단계: 세금 계산 (부가세 10%)
  double taxAmount = (baseAmount - discountAmount) * 0.1;
  
  // 4단계: 최종 금액 계산
  totalAmount = baseAmount - discountAmount + taxAmount;
}
```

## 🏗️ 코드 구조 및 포맷팅

### 들여쓰기 및 공백
- 2칸 들여쓰기 사용
- 일관된 공백 유지
- 함수 길이는 50줄 이내로 제한
- 복잡한 로직은 작은 함수들로 분리

### 함수 분리 예시
```dart
class TransactionService {
  /// 거래내역 생성
  Future<void> createTransaction(Transaction transaction) async {
    // 1. 입력 데이터 검증
    _validateTransaction(transaction);
    
    // 2. Firebase에 저장
    await _saveToFirebase(transaction);
    
    // 3. 로컬 캐시 업데이트
    _updateLocalCache(transaction);
    
    // 4. 알림 발송
    _sendNotification(transaction);
  }
  
  /// 거래내역 데이터 검증
  void _validateTransaction(Transaction transaction) {
    if (transaction.amount <= 0) {
      throw ArgumentError('금액은 0보다 커야 합니다.');
    }
    if (transaction.description.isEmpty) {
      throw ArgumentError('설명을 입력해주세요.');
    }
  }
}
```

## 🚨 에러 처리 규칙

### 예외 처리
```dart
class TransactionService {
  Future<Transaction> getTransaction(String id) async {
    try {
      // Firebase에서 데이터 조회
      final doc = await FirebaseFirestore.instance
          .collection('transactions')
          .doc(id)
          .get();
      
      if (!doc.exists) {
        throw TransactionNotFoundException('거래내역을 찾을 수 없습니다: $id');
      }
      
      return Transaction.fromMap(doc.data()!);
    } on FirebaseException catch (e) {
      // Firebase 관련 에러 처리
      throw TransactionServiceException('데이터베이스 오류: ${e.message}');
    } catch (e) {
      // 기타 예상치 못한 에러 처리
      throw TransactionServiceException('알 수 없는 오류: $e');
    }
  }
}
```

## 🌿 Git 브랜치 전략

### 브랜치 종류
```
main (또는 master)          # 메인 브랜치 - 안정적인 버전
├── develop                 # 개발 브랜치 - 통합 테스트용
├── feature/지출추가        # 기능 개발 브랜치
├── feature/사용자인증      # 기능 개발 브랜치
├── bugfix/로그인오류       # 버그 수정 브랜치
└── hotfix/긴급수정         # 긴급 수정 브랜치
```

### 브랜치 생성 규칙
```bash
# ✅ 좋은 예시:
git checkout -b feature/지출추가          # 기능 개발
git checkout -b bugfix/로그인오류         # 버그 수정
git checkout -b hotfix/긴급수정          # 긴급 수정

# ❌ 나쁜 예시:
git checkout -b new                     # 너무 모호함
git checkout -b fix                     # 무엇을 수정하는지 모름
```

## 💬 커밋 메시지 규칙

### 커밋 타입
```bash
feat: 새로운 기능 추가
fix: 버그 수정
docs: 문서 수정
style: 코드 포맷팅 (기능 변경 없음)
refactor: 코드 리팩토링 (기능 변경 없음)
test: 테스트 코드 추가/수정
chore: 빌드 프로세스 또는 보조 도구 변경
```

### 커밋 메시지 예시
```bash
# ✅ 좋은 예시:
feat(transaction): 지출 추가 화면 구현
- 금액 입력 필드 추가
- 카테고리 선택 드롭다운 구현
- 저장 버튼 및 유효성 검사 추가

fix(auth): 로그인 후 화면 전환 오류 수정
- Navigator.push 대신 Navigator.pushReplacement 사용
- 로그인 성공 시 홈 화면으로 올바르게 이동

# ❌ 나쁜 예시:
update
fix bug
add something
```

## 🔄 Pull Request 규칙

### PR 제목 규칙
```
# ✅ 좋은 예시:
feat: 지출 추가 기능 구현
fix: 로그인 후 화면 전환 오류 수정
docs: 프로젝트 설치 가이드 추가

# ❌ 나쁜 예시:
Update
Bug fix
New feature
```

### PR 설명 템플릿
```markdown
## 🎯 변경사항 요약
- 지출 추가 화면 구현
- 금액 입력 및 카테고리 선택 기능 추가
- Firebase 연동으로 데이터 저장

## 🔍 변경된 파일
- `lib/screens/add_transaction_screen.dart` (신규)
- `lib/models/transaction.dart` (수정)
- `lib/services/transaction_service.dart` (신규)

## 🧪 테스트 방법
1. 앱 실행 후 지출 추가 버튼 클릭
2. 금액 입력 및 카테고리 선택
3. 저장 버튼 클릭하여 데이터 저장 확인

## ✅ 체크리스트
- [ ] 코드가 프로젝트 스타일 가이드를 따름
- [ ] 자체 테스트 완료
- [ ] 문서 업데이트 (필요시)
- [ ] 기존 기능에 영향 없음
```

## 🚫 Git 금지사항

### 절대 하지 말아야 할 것들
```bash
# ❌ 절대 금지:
git push origin main              # 메인 브랜치에 직접 푸시
git commit -m "update"            # 의미 없는 커밋 메시지
git add .                         # 모든 파일을 무분별하게 추가
git commit --no-verify            # 커밋 전 검사 건너뛰기
git force push                    # 강제 푸시 (팀원 코드 덮어쓰기)
```

## 🧪 테스트 코드 규칙

### 테스트 파일명 규칙
```
✅ 좋은 예시:
test/
├── models/
│   ├── transaction_test.dart
│   └── user_test.dart
├── services/
│   ├── auth_service_test.dart
│   └── transaction_service_test.dart
└── widgets/
    └── transaction_card_test.dart

❌ 나쁜 예시:
test/
├── test1.dart
├── test2.dart
└── main_test.dart
```

### 테스트 함수명 규칙
```dart
void main() {
  group('Transaction Model Tests', () {
    test('should create transaction with valid data', () {
      // 테스트 내용
    });
    
    test('should throw error when amount is negative', () {
      // 테스트 내용
    });
    
    test('should format currency correctly', () {
      // 테스트 내용
    });
  });
}
```

## 🎨 UI/UX 디자인 가이드라인

### 디자인 원칙
- **스타일**: 모던하고 깔끔한 디자인
- **특화**: 모바일에 특화된 디자인 및 레이아웃
- **직관성**: 3초 내에 원하는 기능 찾기
- **효율성**: 최소 3번의 터치로 지출 입력
- **일관성**: 모든 화면에서 동일한 디자인 패턴

### 색상 테마
- **메인 컬러**: 파란색 계열 (#2196F3, #1976D2)
- **수입**: 초록색 계열 (#4CAF50, #66BB6A)
- **지출**: 빨간색 계열 (#F44336, #EF5350)
- **배경**: 밝은 회색 (#FAFAFA)
- **텍스트**: 진한 회색 (#212121)

### 모바일 특화 디자인
- **터치 친화적**: 최소 터치 영역 48x48dp 이상
- **터치 간격**: 요소들 사이 최소 8dp 간격
- **한 손 조작**: 엄지손가락이 닿는 영역에 중요 기능 배치
- **세로 방향 우선**: 세로 스크롤이 주된 네비게이션

### 네비게이션 패턴
```
메인 탭 구조:
├── 🏠 홈 (대시보드)
├── 💰 거래내역
├── 📅 캘린더
├── 👥 모임
└── ⚙️ 설정

플로팅 액션:
└── ➕ 거래 추가 (핵심 기능)
```

## ☁️ Firebase 아키텍처 규칙

### 데이터베이스 구조 (Firestore)
```
users (사용자)
├── userId
    ├── profile: {name, email, phone}
    ├── groups: [groupId1, groupId2, ...]
    └── settings: {notifications, theme}

groups (모임)
├── groupId
    ├── info: {name, description, createdAt}
    ├── members: [userId1, userId2, ...]
    ├── categories: [categoryId1, categoryId2, ...]
    └── transactions: [transactionId1, transactionId2, ...]

categories (카테고리)
├── categoryId
    ├── groupId: "그룹 소속"
    ├── name: "식비", "교통비" 등
    ├── color: "#FF5733"
    └── icon: "🍽️"

transactions (거래내역)
├── transactionId
    ├── groupId: "모임 ID"
    ├── userId: "작성자 ID"
    ├── type: "income" | "expense"
    ├── amount: 50000
    ├── categoryId: "카테고리 ID"
    ├── description: "설명"
    ├── date: "2024-01-15"
    ├── location: "위치 정보"
    └── smsData: {bank, card, amount} // SMS 자동 추출 데이터
```

### 보안 규칙
- 사용자는 자신의 데이터만 접근 가능
- 모임 멤버는 해당 모임의 데이터만 접근 가능
- 관리자는 모임 설정 변경 가능
- 민감한 정보는 암호화하여 저장

## 🔧 코드 품질 도구

### 🚫 AI 어시스턴트 실행 금지 규칙
```bash
# ❌ 절대 금지:
flutter run                    # AI가 자동으로 앱 실행 금지
flutter test                   # AI가 자동으로 테스트 실행 금지
flutter build                  # AI가 자동으로 빌드 실행 금지

# ✅ 사용자가 직접 요청한 경우에만 실행 가능
# 사용자: "앱을 실행해서 테스트해보자"
# 사용자: "이 기능이 작동하는지 확인해보자"
```

### 자동 포맷팅
```bash
# 코드 자동 포맷팅
flutter format lib/

# 특정 파일만 포맷팅
flutter format lib/main.dart
```

### 린트 검사
```bash
# 코드 품질 검사
flutter analyze

# 특정 규칙만 검사
flutter analyze --no-fatal-infos
```

### 코드 정리
```bash
# 프로젝트 정리
flutter clean

# 의존성 재설치
flutter pub get
```

## 📅 개발 일정 및 우선순위

### Phase 1: MVP (2-3주)
**목표**: 기본적인 지출 관리 앱 완성
- **Week 1**: 프로젝트 설정 및 기본 구조
- **Week 2**: 핵심 기능 개발 (사용자 인증, 지출 추가)
- **Week 3**: 기본 UI 완성

### Phase 2: 기능 확장 (2-3주)
**목표**: 핵심 기능 완성 및 사용성 개선
- **Week 4-5**: 수입 관리 및 데이터 연동
- **Week 6**: 모임 시스템 기초

### Phase 3: 고급 기능 (2-3주)
**목표**: 차별화된 기능 구현
- **Week 7-8**: 캘린더 및 통계
- **Week 9**: SMS 자동화

### Phase 4: 최적화 및 테스트 (1-2주)
**목표**: 앱 완성 및 출시 준비
- **Week 10-11**: 성능 최적화, UI/UX 개선
- **Week 12**: 테스트 및 출시

## 🚀 빠른 시작 체크리스트

### ✅ 1단계: 프로젝트 이해
- [ ] 프로젝트 목표와 방향 이해
- [ ] 개발 일정 확인

### ✅ 2단계: 개발 환경 설정
- [ ] Git 설정 및 브랜치 전략 이해
- [ ] Firebase 프로젝트 설정

### ✅ 3단계: 개발 시작
- [ ] 코딩 표준에 따라 코드 작성
- [ ] UI/UX 가이드라인 준수
- [ ] 정기적인 테스트 및 품질 점검

### 🚫 AI 어시스턴트 주의사항
- [ ] **절대 자동으로 `flutter run` 실행 금지**
- [ ] **절대 자동으로 `flutter test` 실행 금지**
- [ ] **절대 자동으로 `flutter build` 실행 금지**
- [ ] **사용자가 직접 요청한 경우에만 실행 가능**
- [ ] **코드 수정 후 자동 실행하지 말고 사용자에게 확인 요청**

## 🤝 팀 협업 가이드

### 코드 리뷰 시
- 코딩 표준 기준으로 검토
- 건설적인 피드백 제공
- 테스트 커버리지 확인

### 브랜치 관리
- 명확한 커밋 메시지 작성
- Pull Request 템플릿 활용
- 충돌 해결 시 팀원과 논의

### 품질 관리
- 정기적인 코드 품질 점검
- 테스트 커버리지 모니터링
- 사용자 피드백 수집 및 반영

## 📞 도움말

### 질문이 있을 때
1. 먼저 이 RULES 문서 확인
2. 팀원과 논의
3. 필요시 문서 업데이트

### 문서 개선 제안
- 새로운 아이디어나 개선사항 제안
- 팀원들과 논의 후 문서 반영
- 정기적인 문서 리뷰 및 업데이트

---

**문서 버전**: 2.0  
**최종 업데이트**: 2024년 1월  
**작성자**: 개발팀  
**검토자**: 프로젝트 매니저

> 💡 **팁**: 이 RULES는 프로젝트와 함께 성장합니다. 새로운 경험이나 지식을 바탕으로 지속적으로 업데이트해주세요!

## 🌐 GitHub 저장소 관리 및 협업 규칙

### 📍 저장소 정보
- **저장소 URL**: https://github.com/ghkd2007/moim-money-flutter
- **설명**: 머니투게더 - 모임 멤버들이 지출, 예산, 수입 등을 함께 관리하는 Flutter 앱
- **가시성**: Public (공개)
- **기본 브랜치**: master

### 🔄 Git Workflow
```bash
# 1. 최신 코드 가져오기
git pull origin master

# 2. 새 기능 브랜치 생성
git checkout -b feature/새기능명

# 3. 개발 및 커밋
git add .
git commit -m "feat: 새 기능 추가"

# 4. 원격에 푸시
git push origin feature/새기능명

# 5. Pull Request 생성 (GitHub에서)
# 6. 코드 리뷰 후 master에 병합
```

### 📝 커밋 메시지 컨벤션
```bash
# 형식: type: 간단한 설명
feat: 새로운 기능 추가
fix: 버그 수정
docs: 문서 수정
style: 코드 포맷팅 (기능 변경 없음)
refactor: 코드 리팩토링
test: 테스트 추가/수정
chore: 빌드 프로세스 또는 보조 도구 변경
```

### 🌿 브랜치 전략
- **master**: 프로덕션 배포용 (안정적인 코드만)
- **develop**: 개발 통합용 (기능 완성 후)
- **feature/***: 개별 기능 개발용
- **hotfix/***: 긴급 버그 수정용

### 🔍 Pull Request 프로세스
1. **제목**: 명확하고 간결하게
2. **설명**: 변경 사항, 테스트 방법, 관련 이슈
3. **리뷰어**: 최소 1명 이상 지정
4. **테스트**: 로컬에서 테스트 완료 후 PR 생성

### 🚀 배포 및 릴리스
- **버전 관리**: Semantic Versioning (MAJOR.MINOR.PATCH)
- **릴리스 노트**: 주요 변경사항, 버그 수정, 새로운 기능
- **태그**: 각 릴리스마다 Git 태그 생성

### 📋 이슈 관리
- **이슈 템플릿**: 버그 리포트, 기능 요청, 개선 제안
- **라벨**: priority, type, status 등으로 분류
- **마일스톤**: 주요 기능별로 그룹화

### 🤝 팀 협업 규칙
- **일일 스탠드업**: 진행 상황 공유
- **주간 리뷰**: 코드 품질 및 진행 상황 점검
- **문서화**: 주요 결정사항 및 아키텍처 변경사항 기록

### 🔐 보안 및 권한
- **접근 권한**: 팀원별 적절한 권한 설정
- **민감 정보**: API 키, 비밀번호 등은 절대 커밋하지 않음
- **환경 변수**: .env 파일 사용 및 .gitignore 설정

### 📚 문서 관리
- **README.md**: 프로젝트 개요, 설치 방법, 사용법
- **CHANGELOG.md**: 버전별 변경사항 기록
- **API 문서**: 주요 API 엔드포인트 및 사용법
- **아키텍처 문서**: 시스템 구조 및 설계 의도

---

**문서 버전**: 2.1  
**최종 업데이트**: 2024년 1월  
**작성자**: 개발팀  
**검토자**: 프로젝트 매니저
